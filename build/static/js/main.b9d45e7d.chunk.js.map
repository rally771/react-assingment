{"version":3,"sources":["text.jsx","App.js","serviceWorker.js","index.js"],"names":["Text","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetForm","setState","baseState","handleChange","e","defineProperty","target","name","value","findingString","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","textarea","string","i","sentences","multiplestring","keys","_i","_keys","key","keyvalue","keyvalues","multiplestringvalues","_i2","_keyvalues","keyval","_i3","_multiplestringvalues","multiplestringval","wrap","_context","prev","next","preventDefault","state","textbox","toLowerCase","split","console","log","values","length","found","concat","stringvalue","entries","notfound","stop","_x","apply","arguments","react_default","createElement","className","onSubmit","htmlFor","onChange","id","rows","cols","type","placeholder","onClick","href","map","at","att","Component","App","text_Text","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9d45e7d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nexport default class Text extends Component {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n      textarea : '', //Save state of paragraph\r\n      textbox  : '',//Save state of input\r\n      found : [],//if found save values\r\n      notfound:'',//output for notfound\r\n      stringvalue:[]//to display sentence\r\n    }\r\n    this.baseState = this.state ={\r\n      found : [],//if found save values\r\n      notfound:'',//output for notfound\r\n      stringvalue:[]//to display sentence\r\n    }\r\n  }\r\n  resetForm = () => {\r\n    this.setState(this.baseState)\r\n  }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        }) \r\n    }\r\n\r\n    findingString = async (e) => {\r\n        e.preventDefault();\r\n        const textarea = this.state.textarea;\r\n        const string = this.state.textbox;\r\n        let i = 0;\r\n        let sentences = textarea.toLowerCase().split(\"\\n\");// split the object from endline\r\n        let multiplestring = string.toLowerCase().split(\" \");// split inut search word to search mutiple words\r\n        \r\n        console.log(multiplestring);\r\n        const keys = Object.values(sentences) // got values from the splitted sentence\r\nfor (const key of keys) {// loop for each line\r\n  i++;\r\n  \r\n  let keyvalue = key.split(\" \"); // get words from sentence\r\n  console.log(\"keyvalue\",keyvalue);\r\n  let keyvalues = Object.values(keyvalue); //save values \r\n  \r\n  let multiplestringvalues = Object.values(multiplestring); // for multiple words\r\n  for(const keyval of keyvalues ){ //find each word from sentences\r\n    for(const multiplestringval of multiplestringvalues){ // findd each word from word to search from\r\n    if (keyval === multiplestringval) { // If the value is equal to sentence\r\n      await this.setState({\r\n       found : this.state.found.concat(i), // incremen\r\n         stringvalue :this.state.stringvalue.concat( Object.values(sentences)[i-1]) // to display sentence \r\n      });\r\n     \r\n      console.log(\"sentence\" ,Object.entries(sentences)[i-1]); // to display sentence \r\n      console.log(\"founded at\", this.state.found)\r\n    }\r\n    else{\r\n      \r\n    }\r\n  }\r\n  }\r\n  await this.setState({\r\n        notfound : this.state.notfound.concat(\"not found\")\r\n       });\r\n  \r\n}\r\n        \r\n    }\r\n\r\n  render() {\r\n    const { found } = this.state;\r\n    const { notfound } = this.state;\r\n    const { stringvalue } = this.state;\r\n    // console.log(this.state,\"this.state\")\r\n    return (\r\n      \r\n      <div className=\"form-main\"> \r\n      \r\n        <form onSubmit = {this.findingString}>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"exampleFormControlTextarea1\">Please Enter The Paragraph with endline </label><br/>\r\n                <textarea value = {this.state.textarea}  className=\"form-control text-area-form\" name = \"textarea\" onChange = {this.handleChange} id=\"exampleFormControlTextarea1\" rows=\"3\" cols=\"40\"></textarea>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"inputtext\">Please enter words to search for</label><br />\r\n                <input onChange = {this.handleChange} value = {this.state.textbox} name = \"textbox\" className=\"form-control text-form\" id=\"inputtext\" type=\"text\" placeholder=\"Enter Words to Search\" />\r\n            </div>\r\n            <button type=\"button\" onClick = {this.findingString} className=\"btn btn-primary button\">Find Text</button>\r\n            <button type=\"button\" onClick = {this.resetForm} className=\"btn btn-primary button clear-button\">Clear Search Results</button>\r\n            <br/>\r\n            <div className=\"resume\"><a href =\"https://drive.google.com/open?id=1L49lOZZVbAFz9yJG2BaMKMmHe8gTvtM7\">Download Resume</a></div>\r\n        <br/>\r\n        </form>\r\n        \r\n        {\r\n          found.length > 0 ? \r\n            <p id =\"mainh1\">The words found at line {found.map(at => (at + \" \"))}</p> :\r\n            <p id =\"mainh1\">{notfound}</p>\r\n        }\r\n        {\r\n          found.length && stringvalue.length> 0 ? \r\n            found.map(at => <p id =\"mainh1\">The words  found at {at}</p>) && stringvalue.map(att => <p id =\"mainh1\"> {att}</p>) :\r\n            <p id =\"mainh1\">{notfound}</p>\r\n        }\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Text from './text';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main-background\">\n      <div className=\"container\">\n      <div className=\"col-md-12\">\n      <div className=\"main-form-background\">\n      <div className = \"Title\">\n      <p>React assingment for Quasix Solutions </p>\n      </div>\n      <Text/>\n      </div>\n      </div>\n      </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}